!function(e,t,a){"use strict";e.anythingSlider=function(i,n){var s,o,l=this;l.el=i,l.$el=e(i).addClass("anythingBase").wrap('<div class="anythingSlider"><div class="anythingWindow" /></div>'),l.$el.data("AnythingSlider",l),l.init=function(){if(l.options=s=e.extend({},e.anythingSlider.defaults,n),l.initialized=!1,e.isFunction(s.onBeforeInitialize)&&l.$el.bind("before_initialize",s.onBeforeInitialize),l.$el.trigger("before_initialize",l),e('<!--[if lte IE 8]><script>jQuery("body").addClass("as-oldie");</script><![endif]-->').appendTo("body").remove(),l.$wrapper=l.$el.parent().closest("div.anythingSlider").addClass("anythingSlider-"+s.theme),l.$outer=l.$wrapper.parent(),l.$window=l.$el.closest("div.anythingWindow"),l.$win=e(t),l.$controls=e('<div class="anythingControls"></div>'),l.$nav=e('<ul class="thumbNav"><li><a><span></span></a></li></ul>'),l.$startStop=e('<a href="#" class="start-stop"></a>'),(s.buildStartStop||s.buildNavigation)&&l.$controls.appendTo(s.appendControlsTo&&e(s.appendControlsTo).length?e(s.appendControlsTo):l.$wrapper),s.buildNavigation&&l.$nav.appendTo(s.appendNavigationTo&&e(s.appendNavigationTo).length?e(s.appendNavigationTo):l.$controls),s.buildStartStop&&l.$startStop.appendTo(s.appendStartStopTo&&e(s.appendStartStopTo).length?e(s.appendStartStopTo):l.$controls),l.runTimes=e(".anythingBase").length,l.regex=s.hashTags?new RegExp("panel"+l.runTimes+"-(\\d+)","i"):null,1===l.runTimes&&l.makeActive(),l.flag=!1,s.autoPlayLocked&&(s.autoPlay=!0),l.playing=s.autoPlay,l.slideshow=!1,l.hovered=!1,l.panelSize=[],l.currentPage=l.targetPage=s.startPanel=parseInt(s.startPanel,10)||1,s.changeBy=parseInt(s.changeBy,10)||1,o=(s.mode||"h").toLowerCase().match(/(h|v|f)/),o=s.vertical?"v":(o||["h"])[0],s.mode="v"===o?"vertical":"f"===o?"fade":"horizontal","f"===o&&(s.showMultiple=1,s.infiniteSlides=!1),l.adj=s.infiniteSlides?0:1,l.adjustMultiple=0,s.playRtl&&l.$wrapper.addClass("rtl"),s.buildStartStop&&l.buildAutoPlay(),s.buildArrows&&l.buildNextBackButtons(),l.$lastPage=l.$targetPage=l.$currentPage,s.expand){if(s.aspectRatio===!0)s.aspectRatio=l.$el.width()/l.$el.height();else if("string"==typeof s.aspectRatio&&-1!==s.aspectRatio.indexOf(":")){var i=s.aspectRatio.split(":");s.aspectRatio=i[0]/i[1]}s.aspectRatio>0&&s.showMultiple>1&&(s.aspectRatio=s.aspectRatio*s.showMultiple)}l.updateSlider(),s.expand&&(l.$window.css({width:"100%",height:"100%"}),l.checkResize()),e.isFunction(e.easing[s.easing])||(s.easing="swing"),s.pauseOnHover&&l.$wrapper.hover(function(){l.playing&&(l.$el.trigger("slideshow_paused",l),l.clearTimer(!0))},function(){l.playing&&(l.$el.trigger("slideshow_unpaused",l),l.startStop(l.playing,!0))}),l.slideControls(!1),l.$wrapper.bind("mouseenter mouseleave",function(t){e(this)["mouseenter"===t.type?"addClass":"removeClass"]("anythingSlider-hovered"),l.hovered="mouseenter"===t.type?!0:!1,l.slideControls(l.hovered)}),e(a).keyup(function(e){if(s.enableKeyboard&&l.$wrapper.hasClass("activeSlider")&&!e.target.tagName.match("TEXTAREA|INPUT|SELECT")){if("vertical"!==s.mode&&(38===e.which||40===e.which))return;switch(e.which){case 39:case 40:l.goForward();break;case 37:case 38:l.goBack()}}}),l.currentPage=(s.hashTags?l.gotoHash():"")||s.startPanel||1,l.gotoPage(l.currentPage,!1,null,-1);var r="slideshow_resized slideshow_paused slideshow_unpaused slide_init slide_begin slideshow_stop slideshow_start initialized swf_completed".split(" ");e.each("onSliderResize onShowPause onShowUnpause onSlideInit onSlideBegin onShowStop onShowStart onInitialized onSWFComplete".split(" "),function(t,a){e.isFunction(s[a])&&l.$el.bind(r[t],s[a])}),e.isFunction(s.onSlideComplete)&&l.$el.bind("slide_complete",function(){return setTimeout(function(){s.onSlideComplete(l)},0),!1}),l.initialized=!0,l.$el.trigger("initialized",l),l.startStop(s.autoPlay)},l.updateSlider=function(){l.$el.children(".cloned").remove(),l.navTextVisible="hidden"!==l.$nav.find("span:first").css("visibility"),l.$nav.empty(),l.currentPage=l.currentPage||1,l.$items=l.$el.children(),l.pages=l.$items.length,l.dir="vertical"===s.mode?"top":"left",s.showMultiple=parseInt(s.showMultiple,10)||1,s.navigationSize=s.navigationSize===!1?0:parseInt(s.navigationSize,10)||0,l.$items.find("a").unbind("focus.AnythingSlider").bind("focus.AnythingSlider",function(t){var a=e(this).closest(".panel"),i=l.$items.index(a)+l.adj;l.$items.find(".focusedLink").removeClass("focusedLink"),e(this).addClass("focusedLink"),l.$window.scrollLeft(0).scrollTop(0),-1!==i&&(i>=l.currentPage+s.showMultiple||i<l.currentPage)&&(l.gotoPage(i),t.preventDefault())}),s.showMultiple>1&&(s.showMultiple>l.pages&&(s.showMultiple=l.pages),l.adjustMultiple=s.infiniteSlides&&l.pages>1?0:s.showMultiple-1),l.$controls.add(l.$nav).add(l.$startStop).add(l.$forward).add(l.$back)[l.pages<=1?"hide":"show"](),l.pages>1&&l.buildNavigation(),"fade"!==s.mode&&s.infiniteSlides&&l.pages>1&&(l.$el.prepend(l.$items.filter(":last").clone().addClass("cloned")),s.showMultiple>1?l.$el.append(l.$items.filter(":lt("+s.showMultiple+")").clone().addClass("cloned multiple")):l.$el.append(l.$items.filter(":first").clone().addClass("cloned")),l.$el.find(".cloned").each(function(){e(this).find("a,input,textarea,select,button,area,form").attr({disabled:"disabled",name:""}),e(this).find("[id]")[e.fn.addBack?"addBack":"andSelf"]().removeAttr("id")})),l.$items=l.$el.addClass(s.mode).children().addClass("panel"),l.setDimensions(),s.resizeContents?(l.$items.css("width",l.width),l.$wrapper.css("width",l.getDim(l.currentPage)[0]).add(l.$items).css("height",l.height)):l.$win.load(function(){l.setDimensions(),o=l.getDim(l.currentPage),l.$wrapper.css({width:o[0],height:o[1]}),l.setCurrentPage(l.currentPage,!1)}),l.currentPage>l.pages&&(l.currentPage=l.pages),l.setCurrentPage(l.currentPage,!1),l.$nav.find("a").eq(l.currentPage-1).addClass("cur"),"fade"===s.mode&&(o=l.$items.eq(l.currentPage-1),s.resumeOnVisible?o.css({opacity:1,visibility:"visible"}).siblings().css({opacity:0,visibility:"hidden"}):(l.$items.css("opacity",1),o.fadeIn(0).siblings().fadeOut(0)))},l.buildNavigation=function(){if(s.buildNavigation&&l.pages>1){var t,a,i,n,o;l.$items.filter(":not(.cloned)").each(function(r){o=e("<li/>"),i=r+1,a=(1===i?" first":"")+(i===l.pages?" last":""),t='<a class="panel'+i+(l.navTextVisible?'"':" "+s.tooltipClass+'" title="@"')+' href="#"><span>@</span></a>',e.isFunction(s.navigationFormatter)?(n=s.navigationFormatter(i,e(this)),"string"==typeof n?o.html(t.replace(/@/g,n)):o=e("<li/>",n)):o.html(t.replace(/@/g,i)),o.appendTo(l.$nav).addClass(a).data("index",i)}),l.$nav.children("li").bind(s.clickControls,function(t){!l.flag&&s.enableNavigation&&(l.flag=!0,setTimeout(function(){l.flag=!1},100),l.gotoPage(e(this).data("index"))),t.preventDefault()}),s.navigationSize&&s.navigationSize<l.pages&&(l.$controls.find(".anythingNavWindow").length||l.$nav.before('<ul><li class="prev"><a href="#"><span>'+s.backText+"</span></a></li></ul>").after('<ul><li class="next"><a href="#"><span>'+s.forwardText+"</span></a></li></ul>").wrap('<div class="anythingNavWindow"></div>'),l.navWidths=l.$nav.find("li").map(function(){return e(this).outerWidth(!0)+Math.ceil(parseInt(e(this).find("span").css("left"),10)/2||0)}).get(),l.navLeft=l.currentPage,l.$nav.width(l.navWidth(1,l.pages+1)+25),l.$controls.find(".anythingNavWindow").width(l.navWidth(1,s.navigationSize+1)).end().find(".prev,.next").bind(s.clickControls,function(t){l.flag||(l.flag=!0,setTimeout(function(){l.flag=!1},200),l.navWindow(l.navLeft+s.navigationSize*(e(this).is(".prev")?-1:1))),t.preventDefault()}))}},l.navWidth=function(e,t){var a,i=Math.min(e,t),n=Math.max(e,t),s=0;for(a=i;n>a;a++)s+=l.navWidths[a-1]||0;return s},l.navWindow=function(e){if(s.navigationSize&&s.navigationSize<l.pages&&l.navWidths){var t=l.pages-s.navigationSize+1;e=1>=e?1:e>1&&t>e?e:t,e!==l.navLeft&&(l.$controls.find(".anythingNavWindow").animate({scrollLeft:l.navWidth(1,e),width:l.navWidth(e,e+s.navigationSize)},{queue:!1,duration:s.animationTime}),l.navLeft=e)}},l.buildNextBackButtons=function(){l.$forward=e('<span class="arrow forward"><a href="#"><span>'+s.forwardText+"</span></a></span>"),l.$back=e('<span class="arrow back"><a href="#"><span>'+s.backText+"</span></a></span>"),l.$back.bind(s.clickBackArrow,function(e){s.enableArrows&&!l.flag&&(l.flag=!0,setTimeout(function(){l.flag=!1},100),l.goBack()),e.preventDefault()}),l.$forward.bind(s.clickForwardArrow,function(e){s.enableArrows&&!l.flag&&(l.flag=!0,setTimeout(function(){l.flag=!1},100),l.goForward()),e.preventDefault()}),l.$back.add(l.$forward).find("a").bind("focusin focusout",function(){e(this).toggleClass("hover")}),l.$back.appendTo(s.appendBackTo&&e(s.appendBackTo).length?e(s.appendBackTo):l.$wrapper),l.$forward.appendTo(s.appendForwardTo&&e(s.appendForwardTo).length?e(s.appendForwardTo):l.$wrapper),l.arrowWidth=l.$forward.width(),l.arrowRight=parseInt(l.$forward.css("right"),10),l.arrowLeft=parseInt(l.$back.css("left"),10)},l.buildAutoPlay=function(){l.$startStop.html("<span>"+(l.playing?s.stopText:s.startText)+"</span>").bind(s.clickSlideshow,function(e){s.enableStartStop&&(l.startStop(!l.playing),l.makeActive(),l.playing&&!s.autoPlayDelayed&&l.goForward(!0,s.playRtl)),e.preventDefault()}).bind("focusin focusout",function(){e(this).toggleClass("hover")})},l.checkResize=function(e){var t=!!(a.hidden||a.webkitHidden||a.mozHidden||a.msHidden);clearTimeout(l.resizeTimer),l.resizeTimer=setTimeout(function(){var a=l.$outer.width(),i="BODY"===l.$outer[0].tagName?l.$win.height():l.$outer.height();t||l.lastDim[0]===a&&l.lastDim[1]===i||(l.setDimensions(),l.$el.trigger("slideshow_resized",l),l.gotoPage(l.currentPage,l.playing,null,-1)),"undefined"==typeof e&&l.checkResize()},t?2e3:500)},l.setDimensions=function(){l.$wrapper.find(".anythingWindow, .anythingBase, .panel")[e.fn.addBack?"addBack":"andSelf"]().css({width:"",height:""}),l.width=l.$el.width(),l.height=l.$el.height(),l.outerPad=[l.$wrapper.innerWidth()-l.$wrapper.width(),l.$wrapper.innerHeight()-l.$wrapper.height()];var t,a,i,n,o=0,r={width:"100%",height:"100%"},d=s.showMultiple>1&&"horizontal"===s.mode?l.width||l.$window.width()/s.showMultiple:l.$window.width(),p=s.showMultiple>1&&"vertical"===s.mode?l.height/s.showMultiple||l.$window.height()/s.showMultiple:l.$window.height();if(s.expand){if(l.lastDim=[l.$outer.width(),l.$outer.height()],t=l.lastDim[0]-l.outerPad[0],a=l.lastDim[1]-l.outerPad[1],s.aspectRatio&&s.aspectRatio<l.width){var g=a*s.aspectRatio;if(t>g)t=g;else{var c=t/s.aspectRatio;a>c&&(a=c)}}l.$wrapper.add(l.$window).css({width:t,height:a}),l.height=a=s.showMultiple>1&&"vertical"===s.mode?p:a,l.width=d=s.showMultiple>1&&"horizontal"===s.mode?t/s.showMultiple:t,l.$items.css({width:d,height:p})}l.$items.each(function(p){n=e(this),i=n.children(),s.resizeContents?(t=l.width,a=l.height,n.css({width:t,height:a}),i.length&&("EMBED"===i[0].tagName&&i.attr(r),"OBJECT"===i[0].tagName&&i.find("embed").attr(r),1===i.length&&i.css(r))):("vertical"===s.mode?(t=n.css("display","inline-block").width(),n.css("display","")):t=n.width()||l.width,1===i.length&&t>=d&&(t=i.width()>=d?d:i.width(),i.css("max-width",t)),n.css({width:t,height:""}),a=1===i.length?i.outerHeight(!0):n.height(),a<=l.outerPad[1]&&(a=l.height),n.css("height",a)),l.panelSize[p]=[t,a,o],o+="vertical"===s.mode?a:t}),l.$el.css("vertical"===s.mode?"height":"width","fade"===s.mode?l.width:o)},l.getDim=function(e){var t,a,i=l.width,n=l.height;if(l.pages<1||isNaN(e))return[i,n];if(e=s.infiniteSlides&&l.pages>1?e:e-1,a=l.panelSize[e],a&&(i=a[0]||i,n=a[1]||n),s.showMultiple>1)for(a=1;a<s.showMultiple;a++)t=e+a,"vertical"===s.mode?(i=Math.max(i,l.panelSize[t][0]),n+=l.panelSize[t][1]):(i+=l.panelSize[t][0],n=Math.max(n,l.panelSize[t][1]));return[i,n]},l.goForward=function(e,t){l.gotoPage(l[s.allowRapidChange?"targetPage":"currentPage"]+s.changeBy*(t?-1:1),e)},l.goBack=function(e){l.gotoPage(l[s.allowRapidChange?"targetPage":"currentPage"]-s.changeBy,e)},l.gotoPage=function(t,a,i,n){if(a!==!0&&(a=!1,l.startStop(!1),l.makeActive()),/^[#|.]/.test(t)&&e(t).length&&(t=e(t).closest(".panel").index()+l.adj),1!==s.changeBy){var o=l.pages-l.adjustMultiple;1>t&&(t=s.stopAtEnd?1:s.infiniteSlides?l.pages+t:s.showMultiple>1-t?1:o),t>l.pages?t=s.stopAtEnd?l.pages:s.showMultiple>1-t?1:t-=o:t>=o&&(t=o)}l.pages<=1||(l.$lastPage=l.$currentPage,"number"!=typeof t&&(t=parseInt(t,10)||s.startPanel,l.setCurrentPage(t)),a&&s.isVideoPlaying(l)||(s.stopAtEnd&&!s.infiniteSlides&&t>l.pages-s.showMultiple&&(t=l.pages-s.showMultiple+1),l.exactPage=t,t>l.pages+1-l.adj&&(t=s.infiniteSlides||s.stopAtEnd?l.pages:1),t<l.adj&&(t=s.infiniteSlides||s.stopAtEnd?1:l.pages),s.infiniteSlides||(l.exactPage=t),l.currentPage=t>l.pages?l.pages:1>t?1:l.currentPage,l.$currentPage=l.$items.eq(l.currentPage-l.adj),l.targetPage=0===t?l.pages:t>l.pages?1:t,l.$targetPage=l.$items.eq(l.targetPage-l.adj),n="undefined"!=typeof n?n:s.animationTime,n>=0&&l.$el.trigger("slide_init",l),n>0&&s.toggleControls===!0&&l.slideControls(!0),s.buildNavigation&&l.setNavigation(l.targetPage),a!==!0&&(a=!1),(!a||s.stopAtEnd&&t===l.pages)&&l.startStop(!1),n>=0&&l.$el.trigger("slide_begin",l),setTimeout(function(e){var a,o=!0;s.allowRapidChange&&l.$wrapper.add(l.$el).add(l.$items).stop(!0,!0),s.resizeContents||(a=l.getDim(t),e={},l.$wrapper.width()!==a[0]&&(e.width=a[0]||l.width,o=!1),l.$wrapper.height()!==a[1]&&(e.height=a[1]||l.height,o=!1),o||l.$wrapper.filter(":not(:animated)").animate(e,{queue:!1,duration:0>n?0:n,easing:s.easing})),"fade"===s.mode?l.$lastPage[0]!==l.$targetPage[0]?(l.fadeIt(l.$lastPage,0,n),l.fadeIt(l.$targetPage,1,n,function(){l.endAnimation(t,i,n)})):l.endAnimation(t,i,n):(e={},e[l.dir]=-l.panelSize[s.infiniteSlides&&l.pages>1?t:t-1][2],"vertical"!==s.mode||s.resizeContents||(e.width=a[0]),l.$el.filter(":not(:animated)").animate(e,{queue:!1,duration:0>n?0:n,easing:s.easing,complete:function(){l.endAnimation(t,i,n)}}))},parseInt(s.delayBeforeAnimate,10)||0)))},l.endAnimation=function(e,t,a){0===e?(l.$el.css(l.dir,"fade"===s.mode?0:-l.panelSize[l.pages][2]),e=l.pages):e>l.pages&&(l.$el.css(l.dir,"fade"===s.mode?0:-l.panelSize[1][2]),e=1),l.exactPage=e,l.setCurrentPage(e,!1),"fade"===s.mode&&l.fadeIt(l.$items.not(":eq("+(e-l.adj)+")"),0,0),l.hovered||l.slideControls(!1),s.hashTags&&l.setHash(e),a>=0&&l.$el.trigger("slide_complete",l),"function"==typeof t&&t(l),s.autoPlayLocked&&!l.playing&&setTimeout(function(){l.startStop(!0)},s.resumeDelay-(s.autoPlayDelayed?s.delay:0))},l.fadeIt=function(t,a,i,n){var o=t.filter(":not(:animated)"),l=0>i?0:i;s.resumeOnVisible?(1===a&&o.css("visibility","visible"),o.fadeTo(l,a,function(){0===a&&o.css("visibility","hidden"),e.isFunction(n)&&n()})):o[0===a?"fadeOut":"fadeIn"](l,n)},l.setCurrentPage=function(e,t){if(e=parseInt(e,10),!(l.pages<1||0===e||isNaN(e))){if(e>l.pages+1-l.adj&&(e=l.pages-l.adj),e<l.adj&&(e=1),s.buildArrows&&!s.infiniteSlides&&s.stopAtEnd&&(l.$forward[e===l.pages-l.adjustMultiple?"addClass":"removeClass"]("disabled"),l.$back[1===e?"addClass":"removeClass"]("disabled"),e===l.pages&&l.playing&&l.startStop()),!t){var a=l.getDim(e);l.$wrapper.css({width:a[0],height:a[1]}).add(l.$window).scrollLeft(0).scrollTop(0),l.$el.css(l.dir,"fade"===s.mode?0:-l.panelSize[s.infiniteSlides&&l.pages>1?e:e-1][2])}l.currentPage=e,l.$currentPage=l.$items.removeClass("activePage").eq(e-l.adj).addClass("activePage"),s.buildNavigation&&l.setNavigation(e)}},l.setNavigation=function(e){l.$nav.find(".cur").removeClass("cur").end().find("a").eq(e-1).addClass("cur")},l.makeActive=function(){l.$wrapper.hasClass("activeSlider")||(e(".activeSlider").removeClass("activeSlider"),l.$wrapper.addClass("activeSlider"))},l.gotoHash=function(){var a=t.location.hash,i=a.indexOf("&"),n=a.match(l.regex);return null!==n||/^#&/.test(a)||/#!?\//.test(a)||/\=/.test(a)?null!==n&&(n=s.hashTags?parseInt(n[1],10):null):(a=a.substring(0,i>=0?i:a.length),n=e(a).length&&e(a).closest(".anythingBase")[0]===l.el?l.$items.index(e(a).closest(".panel"))+l.adj:null),n},l.setHash=function(e){var a="panel"+l.runTimes+"-",i=t.location.hash;"undefined"!=typeof i&&(t.location.hash=i.indexOf(a)>0?i.replace(l.regex,a+e):i+"&"+a+e)},l.slideControls=function(e){var t=e?"slideDown":"slideUp",a=e?0:s.animationTime,i=e?s.animationTime:0,n=e?1:0,o=e?0:1;s.toggleControls&&l.$controls.stop(!0,!0).delay(a)[t](s.animationTime/2).delay(i),s.buildArrows&&s.toggleArrows&&(!l.hovered&&l.playing&&(o=1,n=0),l.$forward.stop(!0,!0).delay(a).animate({right:l.arrowRight+o*l.arrowWidth,opacity:n},s.animationTime/2),l.$back.stop(!0,!0).delay(a).animate({left:l.arrowLeft+o*l.arrowWidth,opacity:n},s.animationTime/2))},l.clearTimer=function(e){l.timer&&(t.clearInterval(l.timer),!e&&l.slideshow&&(l.$el.trigger("slideshow_stop",l),l.slideshow=!1))},l.startStop=function(e,i){e!==!0&&(e=!1),l.playing=e,e&&!i&&(l.$el.trigger("slideshow_start",l),l.slideshow=!0),s.buildStartStop&&(l.$startStop.toggleClass("playing",e).find("span").html(e?s.stopText:s.startText),"hidden"===l.$startStop.find("span").css("visibility")&&l.$startStop.addClass(s.tooltipClass).attr("title",e?s.stopText:s.startText)),e?(l.clearTimer(!0),l.timer=t.setInterval(function(){a.hidden||a.webkitHidden||a.mozHidden||a.msHidden?s.autoPlayLocked||l.startStop():s.isVideoPlaying(l)?s.resumeOnVideoEnd||l.startStop():l.goForward(!0,s.playRtl)},s.delay)):l.clearTimer()},l.init()},e.anythingSlider.defaults={theme:"default",mode:"horiz",expand:!1,resizeContents:!0,showMultiple:!1,easing:"swing",buildArrows:!0,buildNavigation:!0,buildStartStop:!0,toggleArrows:!1,toggleControls:!1,startText:"Start",stopText:"Stop",forwardText:"&raquo;",backText:"&laquo;",tooltipClass:"tooltip",enableArrows:!0,enableNavigation:!0,enableStartStop:!0,enableKeyboard:!0,startPanel:1,changeBy:1,hashTags:!0,infiniteSlides:!0,navigationFormatter:null,navigationSize:!1,autoPlay:!1,autoPlayLocked:!1,autoPlayDelayed:!1,pauseOnHover:!0,stopAtEnd:!1,playRtl:!1,delay:3e3,resumeDelay:15e3,animationTime:600,delayBeforeAnimate:0,clickForwardArrow:"click",clickBackArrow:"click",clickControls:"click focusin",clickSlideshow:"click",allowRapidChange:!1,resumeOnVideoEnd:!0,resumeOnVisible:!0,isVideoPlaying:function(){return!1}},e.fn.anythingSlider=function(t,a){return this.each(function(){var i,n=e(this).data("AnythingSlider");(typeof t).match("object|undefined")?n?n.updateSlider():new e.anythingSlider(this,t):/\d/.test(t)&&!isNaN(t)&&n?(i="number"==typeof t?t:parseInt(e.trim(t),10),i>=1&&i<=n.pages&&n.gotoPage(i,!1,a)):/^[#|.]/.test(t)&&e(t).length&&n.gotoPage(t,!1,a)})}}(jQuery,window,document);
//# sourceMappingURL=data:application/json;base64,